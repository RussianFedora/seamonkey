--- mozilla/toolkit/xre/nsAppRunner.cpp.old	2006-11-09 21:55:12.000000000 +0100
+++ mozilla/toolkit/xre/nsAppRunner.cpp	2007-10-17 17:41:20.000000000 +0200
@@ -299,6 +299,12 @@ strimatch(const char* lowerstr, const ch
   return PR_TRUE;
 }
 
+enum RemoteResult {
+  REMOTE_NOT_FOUND  = 0,
+  REMOTE_FOUND      = 1,
+  REMOTE_ARG_BAD    = 2
+};
+
 enum ArgResult {
   ARG_NONE  = 0,
   ARG_FOUND = 1,
@@ -978,7 +984,7 @@ HandleRemoteArgument(const char* remote)
   return 0;
 }
 
-static PRBool
+static RemoteResult
 RemoteCommandLine()
 {
   nsresult rv;
@@ -992,7 +998,7 @@ RemoteCommandLine()
   ar = CheckArg("a", &temp);
   if (ar == ARG_BAD) {
     PR_fprintf(PR_STDERR, "Error: argument -a requires an application name\n");
-    return PR_FALSE;
+    return REMOTE_ARG_BAD;
   } else if (ar == ARG_FOUND) {
     program.Assign(temp);
   }
@@ -1000,13 +1006,13 @@ RemoteCommandLine()
   ar = CheckArg("u", &username);
   if (ar == ARG_BAD) {
     PR_fprintf(PR_STDERR, "Error: argument -u requires a username\n");
-    return PR_FALSE;
+    return REMOTE_ARG_BAD;
   }
 
   XRemoteClient client;
   rv = client.Init();
   if (NS_FAILED(rv))
-    return PR_FALSE;
+    return REMOTE_NOT_FOUND;
  
   nsXPIDLCString response;
   PRBool success = PR_FALSE;
@@ -1015,9 +1021,9 @@ RemoteCommandLine()
                               getter_Copies(response), &success);
   // did the command fail?
   if (NS_FAILED(rv) || !success)
-    return PR_FALSE;
+    return REMOTE_NOT_FOUND;
 
-  return PR_TRUE;
+  return REMOTE_FOUND;
 }
 #endif // MOZ_ENABLE_XREMOTE
 
@@ -2068,8 +2074,11 @@ XRE_main(int argc, char* argv[], const n
 
   if (!PR_GetEnv("MOZ_NO_REMOTE")) {
     // Try to remote the entire command line. If this fails, start up normally.
-    if (RemoteCommandLine())
+    RemoteResult rr = RemoteCommandLine();
+    if (rr == REMOTE_FOUND)
       return 0;
+    else if (rr == REMOTE_ARG_BAD)
+      return 1;
   }
 #endif
 
