---
 netwerk/protocol/http/src/nsHttpDigestAuth.cpp |   82 +++++++++++++++++++++----
 netwerk/protocol/http/src/nsHttpDigestAuth.h   |    4 +
 2 files changed, 73 insertions(+), 13 deletions(-)

Index: mozilla/netwerk/protocol/http/src/nsHttpDigestAuth.cpp
===================================================================
--- mozilla.orig/netwerk/protocol/http/src/nsHttpDigestAuth.cpp	2007-10-09 18:13:40.000000000 +0200
+++ mozilla/netwerk/protocol/http/src/nsHttpDigestAuth.cpp	2007-10-09 18:13:54.000000000 +0200
@@ -337,57 +337,78 @@
 
   rv = CalculateHA2(httpMethod, path, qop, upload_data_digest, ha2_digest);
   if (NS_FAILED(rv)) return rv;
 
   rv = CalculateResponse(ha1_digest, ha2_digest, nonce, qop, nonce_count,
                          cnonce, response_digest);
   if (NS_FAILED(rv)) return rv;
 
+  //
+  // Values that need to match the quoted-string production from RFC 2616:
+  //
+  //    username
+  //    realm
+  //    nonce
+  //    opaque
+  //    cnonce
+  //
+
   nsCAutoString authString;
-  authString.AssignLiteral("Digest username=\"");
-  authString += cUser;
-  authString.AppendLiteral("\", realm=\"");
-  authString += realm;
-  authString.AppendLiteral("\", nonce=\"");
-  authString += nonce;
-  authString.AppendLiteral("\", uri=\"");
+
+  authString.AssignLiteral("Digest username=");
+  rv = AppendQuotedString(cUser, authString);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  authString.AppendLiteral(", realm=");
+  rv = AppendQuotedString(realm, authString);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  authString.AppendLiteral(", nonce=");
+  rv = AppendQuotedString(nonce, authString);
+  NS_ENSURE_SUCCESS(rv, rv);
+
+  authString.AppendLiteral(", uri=\"");
   authString += path;
   if (algorithm & ALGO_SPECIFIED) {
     authString.AppendLiteral("\", algorithm=");
     if (algorithm & ALGO_MD5_SESS)
       authString.AppendLiteral("MD5-sess");
     else
       authString.AppendLiteral("MD5");
   } else {
     authString += '\"';
   }
   authString.AppendLiteral(", response=\"");
   authString += response_digest;
+  authString += '\"';
 
   if (!opaque.IsEmpty()) {
-    authString.AppendLiteral("\", opaque=\"");
-    authString += opaque;
+    authString.AppendLiteral(", opaque=");
+    rv = AppendQuotedString(opaque, authString);
+    NS_ENSURE_SUCCESS(rv, rv);
   }
 
   if (qop) {
-    authString.AppendLiteral("\", qop=");
+    authString.AppendLiteral(", qop=");
     if (requireExtraQuotes)
       authString += '\"';
     authString.AppendLiteral("auth");
     if (qop & QOP_AUTH_INT)
       authString.AppendLiteral("-int");
     if (requireExtraQuotes)
       authString += '\"';
     authString.AppendLiteral(", nc=");
     authString += nonce_count;
-    authString.AppendLiteral(", cnonce=\"");
-    authString += cnonce;
+
+    authString.AppendLiteral(", cnonce=");
+    rv = AppendQuotedString(cnonce, authString);
+    NS_ENSURE_SUCCESS(rv, rv);
   }
-  authString += '\"';
+
 
   *creds = ToNewCString(authString);
   return NS_OK;
 }
 
 NS_IMETHODIMP
 nsHttpDigestAuth::GetAuthFlags(PRUint32 *flags)
 {
@@ -668,9 +689,44 @@
             nsCRT::strncasecmp(challenge+algostart, "auth-int", 8) == 0)
           *qop |= QOP_AUTH_INT;
       }
     }
   }
   return NS_OK;
 }
 
+nsresult
+nsHttpDigestAuth::AppendQuotedString(const nsACString & value,
+                                     nsACString & aHeaderLine)
+{
+  nsCAutoString quoted;
+  nsACString::const_iterator s, e;
+  value.BeginReading(s);
+  value.EndReading(e);
+
+  //
+  // Encode string according to RFC 2616 quoted-string production
+  //
+  quoted.Append('"');
+  for ( ; s != e; ++s) {
+    //
+    // CTL = <any US-ASCII control character (octets 0 - 31) and DEL (127)>
+    //
+    if (*s <= 31 || *s == 127) {
+      return NS_ERROR_FAILURE;
+    }
+
+    // Escape two syntactically significant characters
+    if (*s == '"' || *s == '\\') {
+      quoted.Append('\\');
+    }
+
+    quoted.Append(*s);
+  }
+  // FIXME: bug 41489
+  // We should RFC2047-encode non-Latin-1 values according to spec
+  quoted.Append('"');
+  aHeaderLine.Append(quoted);
+  return NS_OK;
+}
+
 // vim: ts=2 sw=2
Index: mozilla/netwerk/protocol/http/src/nsHttpDigestAuth.h
===================================================================
--- mozilla.orig/netwerk/protocol/http/src/nsHttpDigestAuth.h	2007-10-09 18:13:40.000000000 +0200
+++ mozilla/netwerk/protocol/http/src/nsHttpDigestAuth.h	2007-10-09 18:13:58.000000000 +0200
@@ -104,15 +104,19 @@
                             PRUint16 * algorithm,
                             PRUint16 * qop);
 
     // result is in mHashBuf
     nsresult MD5Hash(const char *buf, PRUint32 len);
 
     nsresult GetMethodAndPath(nsIHttpChannel *, PRBool, nsCString &, nsCString &);
 
+    // append the quoted version of value to aHeaderLine
+    nsresult AppendQuotedString(const nsACString & value,
+                                nsACString & aHeaderLine);
+
   protected:
     nsCOMPtr<nsICryptoHash>        mVerifier;
     char                           mHashBuf[DIGEST_LENGTH];
     PRBool                         mGotVerifier;
 };
 
 #endif // nsHttpDigestAuth_h__
