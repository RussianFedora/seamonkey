---
 content/xul/document/src/nsXULDocument.cpp |   33 ++++++++++++++++-------------
 1 file changed, 19 insertions(+), 14 deletions(-)

Index: mozilla/content/xul/document/src/nsXULDocument.cpp
===================================================================
--- mozilla.orig/content/xul/document/src/nsXULDocument.cpp	2007-10-09 18:35:19.000000000 +0200
+++ mozilla/content/xul/document/src/nsXULDocument.cpp	2007-10-09 18:35:37.000000000 +0200
@@ -1097,39 +1097,44 @@
                            PL_DHashTableOperate(mBroadcasterMap, domele.get(),
                                                 PL_DHASH_LOOKUP));
 
         if (PL_DHASH_ENTRY_IS_BUSY(entry)) {
             // We've got listeners: push the value.
             nsAutoString value;
             rv = aElement->GetAttr(kNameSpaceID_None, aAttribute, value);
 
-            for (PRInt32 i = entry->mListeners.Count() - 1; i >= 0; --i) {
+            nsCOMArray<nsIContent> listenerArray;
+            PRInt32 i;
+            for (i = entry->mListeners.Count() - 1; i >= 0; --i) {
                 BroadcastListener* bl =
                     NS_STATIC_CAST(BroadcastListener*, entry->mListeners[i]);
 
                 if ((bl->mAttribute == aAttribute) ||
                     (bl->mAttribute == nsXULAtoms::_star)) {
                     nsCOMPtr<nsIContent> listener
                         = do_QueryInterface(bl->mListener);
-
-                    if (rv == NS_CONTENT_ATTR_NO_VALUE ||
-                        rv == NS_CONTENT_ATTR_HAS_VALUE) {
-                        listener->SetAttr(kNameSpaceID_None, aAttribute, value,
-                                          PR_TRUE);
-                    }
-                    else {
-                        listener->UnsetAttr(kNameSpaceID_None, aAttribute,
-                                            PR_TRUE);
-                    }
-
-                    ExecuteOnBroadcastHandlerFor(aElement, bl->mListener,
-                                                 aAttribute);
+                    listenerArray.AppendObject(listener);
                 }
             }
+            for (i = 0; i < listenerArray.Count(); ++i) {
+                nsIContent* listener = listenerArray[i];
+                 if (rv == NS_CONTENT_ATTR_NO_VALUE ||
+                     rv == NS_CONTENT_ATTR_HAS_VALUE) {
+                     listener->SetAttr(kNameSpaceID_None, aAttribute, value,
+                                       PR_TRUE);
+                 }
+                 else {
+                     listener->UnsetAttr(kNameSpaceID_None, aAttribute,
+                                         PR_TRUE);
+                 }
+
+                nsCOMPtr<nsIDOMElement> listenerEl = do_QueryInterface(listener);
+                ExecuteOnBroadcastHandlerFor(aElement, listenerEl, aAttribute);
+            }
         }
     }
 
     // Now notify external observers
     NS_DOCUMENT_NOTIFY_OBSERVERS(AttributeChanged,
                                  (this, aElement, aNameSpaceID,
                                   aAttribute, aModType));
 
